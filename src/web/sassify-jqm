#! /usr/bin/python
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# sassify-jqm  -- Take a jQuery Mobile theme and extract its parameters.

import sys
import re

parms = { }

found_mismatch = False

def register_parm(name, value):
    global found_mismatch
    value = re.sub('^ | $', '', re.sub('[ \t]+', ' ', value))
    if value == '':
        print >>sys.stderr, "Value for %s not found, please fix me." % name
        exit(1)
    if name in parms:
        if parms[name] != value:
            print >>sys.stderr, "Value mismatch for %s: saw both '%s' and '%s'" % (name, value, parms[name])
            found_mismatch = True
    else:
        parms[name] = value

# A theme parameter and its value are written like this in the files
# shipped by jQuery Mobile:
#
#   VALUE /*{NAME}*/
#
# The tricky part is finding the beginning of VALUE.  Often, VALUE is
# preceeded by \t, and this seems to mark the beginning of VALUE
# reliably.  But we must also handle these cases, that don't use \t
# characters and might or might not include a comma in the value:
#
#    font-family: Helvetica, Arial, sans-serif /*{global-font-family}*/;
#
# and
#
#    background-image: linear-gradient( #3c3c3c /*{a-bar-background-start}*/, #111 /*{a-bar-background-end}*/);
#
# The former is handled by 'full_parm_pattern', which matches a line
# where the parameter is the complete value of a property.  The rest
# is handled by 'partial_parm_pattern'.

full_parm_pattern = '([a-zA-Z_-]+ *:)([^:{}\t]+)/\\*\\{([a-zA-Z_-]+)\\}\\*/;'
partial_parm_pattern = '(\t([^:/]+)|([^:/,()\t]+))/\\*\\{([a-zA-Z_-]+)\\}\\*/'

def handle_full_parm(match):
    prefix = match.group(1)
    name = match.group(3)
    value = match.group(2)
    register_parm(name, value)
    return prefix + ' $' + name + ';'

def handle_partial_parm(match):
    name = match.group(4)
    value = match.group(2) or match.group(3)
    register_parm(name, value)
    return ' $' + name

input = sys.stdin.read()

output = re.sub(partial_parm_pattern, handle_partial_parm,
                re.sub(full_parm_pattern, handle_full_parm, input))

if found_mismatch:
    exit(1)

for p in sorted(parms.keys()):
    print "$%s: %s !default;" % (p, parms[p])

print
print output
