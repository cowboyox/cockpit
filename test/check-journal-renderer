#!/usr/bin/js

/*
 * This file is part of Cockpit.
 *
 * Copyright (C) 2013 Red Hat, Inc.
 *
 * Cockpit is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2.1 of the License, or
 * (at your option) any later version.
 *
 * Cockpit is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with Cockpit; If not, see <http://www.gnu.org/licenses/>.
 */

load("../src/web/cockpit-journal-renderer.js");

debug = false;

function C_(ctxt, str) { return str; }

function pk(label, obj)
{
    putstr(label);
    if (obj) {
        putstr(": ");
        putstr(obj.toSource());
    }
    putstr("\n");
}

function dbg(label, obj)
{
    if (debug)
        pk(label, obj);
}

var time = 0;
var bootid = 0;

function make_entry (message)
{
    return [ time.toString(),
             "fake",
             bootid.toString(),
             "fake",
             "12",
             "fake",
             "3",
             message
           ];
}

function next_day ()
{
    time += 24*60*60*1e6;
}

function reboot ()
{
    bootid += 1;
}

var output;
var renderer;

var funcs = {
    render_line: function (ident, prio, message, count, time, cursor) {
        return { message: message, count: count };
    },

    render_day_header: function (day) {
        return { day: day };
    },

    render_reboot_separator: function () {
        return { reboot: true };
    },

    append: function(elt) {
        dbg('append', elt);
        output.push(elt);
    },
    remove_last: function() {
        dbg('remove-last');
        output = output.slice(0, output.length-1);
    },
    prepend: function(elt) {
        dbg('prepend', elt);
        output.unshift(elt);
    },
    remove_first: function() {
        dbg('remove-first');
        output = output.slice(1, output.length);
    }
};

var test_label;

function start (label)
{
    dbg(label);
    test_label = label;
    output = [ ];
    renderer = cockpit_journal_renderer (funcs);
}

function append (message)
{
    renderer.append (make_entry (message));
}

function append_flush ()
{
    renderer.append_flush ();
}

function prepend (message)
{
    renderer.prepend (make_entry (message));
}

function prepend_flush ()
{
    renderer.prepend_flush ();
}

function expect (label, expected)
{
    // pk (label, output);

    function fail ()
    {
        putstr("FAIL ");
        putstr(test_label);
        putstr(": ");
        putstr(label);
        putstr("\n");
        pk('output  ', output);
        pk('expected', expected);
        quit(1);
    }

    function equal (a, b)
    {
        if (a.day)
            return a.day == b.day;
        else if (a.message)
            return a.message == b.message && a.count == b.count;
        else if (a.reboot)
            return a.reboot == b.reboot;
        else
            return false;
    }

    var i;
    if (output.length != expected.length)
        fail ();

    for (i = 0; i < output.length; i++)
        if (!equal(output[i], expected[i]))
            fail ();
}

start ('append');
append ('foo');
append ('foo');
append_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 }
        ])
append ('foo');
append_flush ();
expect ('three repeated lines after flush',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 3 }
        ])

start ('prepend');
prepend ('foo');
prepend ('foo');
prepend_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 }
        ])
prepend ('foo');
prepend_flush ();
expect ('three repeated lines after flush',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 3 }
        ])

start ('prepend after append')
append ('foo');
append_flush ();
prepend ('foo');
prepend_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 }
        ])

start ('prepend after append')
append ('foo');
append_flush ();
prepend ('bar');
prepend_flush ();
expect ('two different lines',
        [ { day: "January 1, 1970" },
          { message: 'bar', count: 1 },
          { message: 'foo', count: 1 }
        ])

start ('append after prepend')
prepend ('foo');
prepend_flush ();
append ('foo');
append_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 }
        ])

start ('append after split')
prepend ('bar');
prepend ('baz');
prepend_flush ();
append ('foo');
append_flush ();
expect ('two different lines',
        [ { day: "January 1, 1970" },
          { message: 'baz', count: 1 },
          { message: 'bar', count: 1 },
          { message: 'foo', count: 1 }
        ])

start ('append after split')
prepend ('bar');
prepend ('baz');
prepend_flush ();
append ('bar');
append_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'baz', count: 1 },
          { message: 'bar', count: 2 },
        ])

start ('prepend after split')
append ('foo');
append ('bar');
append_flush ();
prepend ('baz');
prepend_flush ();
expect ('two different lines',
        [ { day: "January 1, 1970" },
          { message: 'baz', count: 1 },
          { message: 'foo', count: 1 },
          { message: 'bar', count: 1 },
        ])

start ('prepend after split')
append ('foo');
append ('bar');
append_flush ();
prepend ('foo');
prepend_flush ();
expect ('two repeated lines',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 },
          { message: 'bar', count: 1 },
        ])

start ('reboot')
append ('foo');
append ('foo');
reboot ();
append ('foo');
append_flush ();
expect ('two repeated lines before reboot',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 2 },
          { reboot: true },
          { message: 'foo', count: 1 },
        ])

start ('prepend to reboot same day')
append ('foo');
append ('baz');
append_flush ();
reboot ();
prepend ('bar');
prepend_flush ();
expect ('different lines',
        [ { day: "January 1, 1970" },
          { message: 'bar', count: 1 },
          { reboot: true },
          { message: 'foo', count: 1 },
          { message: 'baz', count: 1 },
        ])

start ('prepend to reboot same day')
append ('foo');
append ('baz');
append_flush ();
reboot ();
prepend ('foo');
prepend_flush ();
expect ('repeated line',
        [ { day: "January 1, 1970" },
          { message: 'foo', count: 1 },
          { reboot: true },
          { message: 'foo', count: 1 },
          { message: 'baz', count: 1 },
        ])
