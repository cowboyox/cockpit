#! /bin/bash
# This file is part of Cockpit.
#
# Copyright (C) 2013 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

# Produce a tarball for a given commit in a Git repo, including all
# submodules.
#
# The tricky part is that commands like "git submodule foreach" only
# work with the submodules of the current checkout, not of a arbitrary
# SHA1.

set -e

cd $(git rev-parse --show-toplevel)

usage() {
    echo >&2 "Usage: git-archive-all PREFIX TREEISH"
    exit 1
}

[ $# == 2 ] || usage

prefix=$1
sha1=$(git rev-parse "$2")

sm_list() {
    if git rev-parse $1:.gitmodules >/dev/null >&/dev/null; then
        git cat-file blob $1:.gitmodules | git config --file /dev/stdin -l | grep "submodule\..*\.path=" | sed 's/.*=//'
    fi
}

sm_get() {
    dn=$(dirname $2)
    if test ${dn} = '.'; then
	dn=
    fi
    bn=$(basename $2)
    git cat-file -p ${1}:${dn} | grep ^160000 | while read mode type sha1 path; do
        if [ "$path" == "${bn}" ]; then
            echo $sha1
        fi
    done
}

sm_foreach() {
    sha1=$1
    prefix=$2
    cmd=$3
    eval $cmd
    sm_list $sha1 | while read p; do
        {   sub=$(sm_get $sha1 $p);
	    if test -z "${sub}"; then
		echo "error: failed to read submodule $p" 1>&2; exit 1
	    fi
	    (cd "$p" && sm_foreach "$sub" "$prefix/$p" "$cmd")
        }
    done
}

tar=$(mktemp)
sub=$(mktemp)
trap "rm -f '$tar' '$sub'" 0

>"$tar"
sm_foreach $sha1 "$prefix" "git archive --format tar --prefix \$prefix/ \$sha1 -o '$sub' && tar -A -f '$tar' '$sub'"
cat "$tar"
